@section header{
    @await Html.PartialAsync("_PartialHeader", new HeaderModel("Expense Tracker"))
}
<div class="body-container">
    <div class="container">
        <div class="header-container">
            <img src="https://i.ibb.co/jfScDTC/budget.png"
                 alt="Expense Tracker" />
            <div class="balance-container" id="container">
                <h2>Your Balance</h2>
                <h2 id="balance" class="balance">$0.00</h2>
            </div>
        </div>
        <div class="inc-exp-container">
            <div>
                <h4>Income</h4>
                <p id="money-plus" class="money plus">+$0.00</p>
            </div>
            <div>
                <h4>Expenses</h4>
                <p id="money-minus" class="money minus">-$0.00</p>
            </div>
        </div>
        <h3>History</h3>
        <ul id="list" class="list"></ul>
        <nav aria-label="Page navigation example">
            <div class="row">
                <div class="col-md-4"></div>
                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-2">
                            <span class="pagination page-item">
                                <span class="page-link" aria-label="previous" id="previous">
                                    <span aria-hidden="true">&laquo;</span>
                                    <span class="sr-only">Previous</span>
                                </span>
                            </span>
                        </div>
                        <div class="col-md-8">
                            <ul id="itemsContainer" class="pagination"></ul>
                        </div>
                        <div class="col-md-2">
                            <span class="pagination page-item">
                                <span class="page-link" aria-label="Next" id="next">
                                    <span aria-hidden="true">&raquo;</span>
                                    <span class="sr-only">Next</span>
                                </span>
                            </span>
                        </div>
                    </div>
                </div>
                
            </div> 
</nav>
       
        <h3>Add new transaction</h3>
        <form id="form">
            <div class="form-control">
                <label for="text">Description</label>
                <input type="text" id="description" placeholder="Enter description..." name="Text" />
                <label for="amount">
                    Amount <br />
                </label>
                <div id='type'>
                    <input type='radio' id='radio_1' name='type' value='1' /><label for="radio_1"><small>Income</small></label>
                    <input type='radio' id='radio_2' name='type' value='2' /><label for="radio_2"><small>Expense</small></label>
                </div>
                <input type="text" id="amount" placeholder="Enter amount..." name="Amount" />
            </div>
            <button class="btn" type="button" id="add_tranaction">Add transaction</button>
        </form>
    </div>
</div>
<!-- Notification -->
<div class="notification-container" id="notification">
    <p>Please add a description and amount</p>
</div>
<!--Validator-->
<div class="validator-container" id="validator">
    <p>The amount should be separated with commas(eg. 123,234.00).</p>
</div>
@section scripts{
    <script>
        let _transaction_Detail;
        let pagination_item;
        const balance = document.getElementById("balance");
        const moneyPlus = document.getElementById("money-plus");
        const moneyMinus = document.getElementById("money-minus");
        const list = document.getElementById("list");
        const form = document.getElementById("form");
        const text = document.getElementById("description");
        const amount = document.getElementById("amount");
        const notification = document.getElementById("notification");
        const validator = document.getElementById("validator");
        const itemsContainer = document.getElementById("itemsContainer");
        var numberOfPage;
        var pageRange;
        var pageIndexSize;
        var startIndex = 1;
        var currentIndex=1;

        $("#body-container").ready(async function () {
            console.log("Document Loaded");
            await initialRetrieve();
            await addTransactionDOM();
            await updateValues();
            $("#description").focus();
        });

        $("#description").on("keypress paste", function (e) {
            if (e.keyCode == 13) {
                console.log("Enter key pressed on description;");
                $('#radio_1').focus();
                $('#radio_1').prop('checked', true);
                console.log("Radio 1 is auto focusing.");
            }
            $("#radio_1").on("keypress paste", function (e) {
                console.log("Keypress on radio1");
                if (e.keyCode == 13) {
                    console.log("Press enterRadio Button1.");
                    $("#amount").focus();
                }
            });
            $("#radio_2").on("keypress paste", function (e) {
                console.log("Keypress on radio2");
                if (e.keyCode == 13) {
                    console.log("Press enter radio button2");
                    $("#amount").focus();
                }
            });
        });
        $("#radio_1").on("keypress paste", function (e) {
            console.log("Keypress on radio1");
            if (e.keyCode == 13) {
                console.log("Press enterRadio Button1.");
                $("#amount").focus();
            }
        });
        $("#radio_2").keydown("keypress paste", function (e) {
            console.log("Keypress on radio2");
            if (e.keyCode == 13) {
                console.log("Press enter radio button2");
                $("#amount").focus();
            }
        });
        $("#amount").on("keypress paste", function (e) {
            var c = this.selectionStart, v = $(this).val();
            if (e.keyCode == 13) {
                console.log("Amount Enter Key pressed.");
                addTransaction();
            }
            if (e.type == "keypress")
                var key = String.fromCharCode(!e.charCode ? e.which : e.charCode)
            else
                var key = e.originalEvent.clipboardData.getData('Text')
            var val = v.substr(0, c) + key + v.substr(c, v.length)
            if (!val.match(/^[0-9,]*$/) || val.match(/^[0-9,]*$/).toString() != val) {
                if (e.keyCode != 13) {
                    e.preventDefault()
                    alert("Only Digits allow");
                }
                return false
            }
            var amount = toNumber(val);
            setTimeout(function () {
                $("#amount").val(numberWithCommas(amount));
            }, 50);
        });

        function numberWithCommas(x) {
            var parts = x.toString().split(".");
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return parts.join(".");
        }
        $('#add_transaction').click(function (e) {
            console.log("Form Submit");
            e.preventDefault();
            addTransaction();
        });

        $("#previous").click(function () {
            const length = _transaction_Detail.length;
            console.log("Previous click at : ", currentIndex);
            if (currentIndex == 1) {
                console.log("Start of page.");
                startIndex = 1;
                currentIndex = 1;
               
                pageClick(currentIndex);
            } else {
                if (currentIndex > 5 || currentIndex > numberOfPage - 5) {
                    console.log("It is not between 1 to 5 or before 5 of end ", currentIndex, ">5", currentIndex, ">", numberOfPage - 5);
                    startIndex--;
                    if (startIndex == 0) {
                        startIndex = 1;
                    }
                    pageIndexSize--;
                    if (pageIndexSize <= 5) {
                        pageIndexSize = 5;
                    }
                    
                }
                
                pageClick(currentIndex);
                currentIndex--;
            }
           
            paginationIndexing(length);
            console.log("Current Index : ", currentIndex);
            console.log("Start Index : ", startIndex);
            console.log("Page Index Size : ", pageIndexSize);
        });

        $("#next").click(function () {
            const length = _transaction_Detail.length;
            console.log("Next click at : ", currentIndex);
            if (currentIndex == numberOfPage) {
                console.log("End of page.");
                //startIndex = numberOfPage;
                currentIndex = numberOfPage;
                startIndex++;
                pageIndexSize++;
                pageClick(currentIndex);
            } else {
                if (pageIndexSize < numberOfPage + 1 && startIndex < numberOfPage-3) {
                    if (currentIndex > 5 || currentIndex > numberOfPage - 5) {
                        console.log("It is not between 1 to 5 or before 5 of end ", currentIndex, ">5", currentIndex, ">", numberOfPage - 5);
                        console.log("Number of Page change or not : ", numberOfPage);
                        startIndex++;
                        pageIndexSize++;
                    }

                    pageClick(currentIndex);
                    currentIndex++;
                }
            }
            
            paginationIndexing(length);
            console.log("Current Index : ", currentIndex);
            console.log("Start Index : ", startIndex);
            console.log("Page Index Size : ", pageIndexSize);
        });

        function showNotification() {
            console.log("Notification shows.");
            notification.classList.add("show");
            setTimeout(() => {
                notification.classList.remove("show");
            }, 2000);
            $("#amount").focus();
        }

        function showValidator() {
            console.log("Validation shows.");
            validator.classList.add("show");
            setTimeout(() => {
                validator.classList.remove("show");
            }, 2000);
        }

        async function addTransaction() {
            console.log("Text : ", text.value);
            console.log("TransactionType: ",)
            console.log("Amount : ", amount.value, "type: ", typeof amount.value);
            if (text.value.trim() === "" || amount.value.trim() === "") {
                console.log("Form Field is blank.");
                showNotification();
            } else {
                console.log("Form Field is not blank.");
                var amount_validator = amount.value;
                console.log("Amount Validator : ", amount_validator);
                var isMatch = (amount_validator.match(/(?=.)^[1-9]?(([1-9][0-9]{0,2}(,[0-9]{3})*)|0)?(\.[0-9]{1,2})?$/)) ? true : false;
                 console.log("Is Match : ", isMatch);
                if (!isMatch) {
                cosole.log("Not Validated");
                  showValidator();
                } else {
                console.log("Validated");
                var radioCheck;
                if ($("#radio_1").is(":checked")) {
                    radioCheck = "income";
                    console.log("Radio 1 is checked.", radioCheck);
                }
                else if ($("#radio_2").is(":checked")) {
                    radioCheck = "expense";
                    console.log("Radio 2 is checked.", radioCheck);
                }

                const _transaction = {
                    Text: text.value,
                    Type: radioCheck,
                    Amount: amount.value,
                };
                console.log("transaction : ", _transaction);
                console.log("Add Transaction to DB is arrived.")
                const response = await addToDB(_transaction);
                console.log("Insert in DB : ", { response });
                console.log("Add Transaction to DB is ended.")
                await addTransactionDOM();//to retrieve from the database
                updateValues();
                text.value = "";
                amount.value = "";
                }
            }
        }

        function addToDB(_transaction) {
            return $.ajax({
                url: "/ExpenseTracker/ExpenseTrackerAdd",
                type: "POST",
                data: { transaction: _transaction },
                dataType: "json"
            });
        }

        async function addTransactionDOM() {
            console.log("Add Transaction Dom is arrived.")
            list.innerHTML = "";
            const response = await retrieve();
            _transaction_Detail = response.list;
            console.log("Outer Ajax ExpenseTrackerProduce:", _transaction_Detail);
            const length = _transaction_Detail.length;
            console.log("Length : ", length);
            await paginationIndexing(length);
        }

        function paginationIndexing(length) {
            console.log("Pagination");
            itemsContainer.innerHTML = "";
            if (length % 5 != 0) {
                var digit = Math.trunc(length / 5); //to transform float to pure number
                console.log("After Converting digit : ", digit, " Wired : ", Math.trunc(46 / 5));
                numberOfPage = digit + 1;
            } else {
                numberOfPage = length / 5;
            }
            console.log("Number of Page : ", numberOfPage);
            if (numberOfPage % 5 != 0) {
                var digit = Math.trunc(numberOfPage / 5); //to transform float to pure number
                console.log("After Converting digit : ", digit, " Wired : ", Math.trunc(46 / 5));
                pageRange = digit + 1;
            } else {
                pageRange = numberOfPage / 5;
            }
            console.log("Number of  page range : ", pageRange);
            if (pageIndexSize === undefined) {
                console.log("Page Index Size is undefined");
                pageIndexSize = 5;
            }
            console.log("Page Index Size : ", pageIndexSize);
            for (var i = startIndex; i <= pageIndexSize; i++) {
                console.log("Page Range iterator : ", i);
                const item = document.createElement("li");
                item.innerHTML = `<button class="page-item page-link" onclick="pageClick(${i})>${i}</button>`;
                itemsContainer.appendChild(item);
            }
            
        }

        function pageClick(i) {
            currentIndex = i;
            console.log("Current index : ", i);
            $(".page-item.page-link").removeClass("page-item page-link");
            $(".page-item.page-link").addClass("circle-button");
            const _transaction = {
                pageIndex:i
            };
            console.log("Transaction : ", _transaction);
            $.ajax({
                url: "/Pagination/PaginationIndexingWithValues",
                type: "POST",
                data: { transaction: _transaction },
                dataType: "json",
                success: function (response) {
                    var row = response.data;
                    console.log("Pagination : ", row);
                    var length = row.length;
                    appendListItem(row, length);
                }
            });
            
        }

        function appendListItem(row, length) {
            console.log("Append list item");
            console.log("row items : ", row);
            console.log("Length : ", length);
            list.innerHTML = "";
            for (var i = 0; i < length; i++) {
                console.log("For loop inner : ")
                const amount = row[i].amount;
                console.log("Amount : ", amount, " ", typeof amount);
                const transactionType = row[i].transactionType;
                const sign = transactionType === "expense" ? "-" : "+";
                const valided_amount = amount.toString().substring(1);
                console.log("Sign : ", sign, "Amount : ", valided_amount);
                console.log("Expense Tracker Detail : ", row[i].description, " ", sign, " ", row[i].id);
                const item = document.createElement("li");
                item.classList.add(sign === "-" ? "minus" : "plus");
                item.innerHTML = `
                  ${row[i].description} <span>${sign}${Math.abs(amount)}</span
                  ><button class="delete-btn" onclick="removeTransaction(${row[i].id})"><i class="fa fa-times"></i></button>
            `;
                list.appendChild(item);
            }
        }

        function retrieve() {
            return $.ajax({
                url: "/ExpenseTracker/ExpenseTrackerProduce",
                type: "GET",
                dataType: "json",
            });
        }
        function initialRetrieve() {
            console.log("Initial :");
            $.ajax({
                url: "/Pagination/PaginationIndexingInitial",
                type: "POST",
                dataType: "json",
                success: function (response) {
                    var row = response.data;
                    var length = row.length;
                    console.log("Initial retrieve : ", row , " length : ", length);
                    appendListItem(row, length);
                }
            });
        }

        async function removeTransaction(id) {
            console.log("Remove Transaction is working.")
            const response = await remove(id);
            console.log("Remove Transaction is done.", { response });
            $("#list").ready(function () {
                console.log("List Loading .");
                _transaction_Detail = null;
                list.innerHTML = "";
                console.log("Transaction Detail during remove : ", _transaction_Detail);
                addTransactionDOM();
                updateValues();
            });
        }

        function remove(id) {
            const _transaction = {
                TransId: id
            };
            return $.ajax({
                url: "/ExpenseTracker/ExpenseTrackerRemove",
                type: "POST",
                data: { transaction: _transaction },
                dataType: "json"
            });
        }

        function updateValues() {
            console.log("Update Value is working..");
            $.ajax({
                url: "/ExpenseTracker/ExpenseTrackerUpdateValues",
                type: "POST",
                dataType: "json",
                success: function (response) {
                    $("#balance").html("$$ " + response.balance);
                    $("#money-plus").html("+$ " + response.income);
                    $("#money-minus").html("-$ " + response.expense);
                    $("#description").focus();
                }

            });
        }

    </script>
}
